/* IMPORTANT INSTRUCTIONS FOR LEARNERS
1) DO NOT CHANGE THE ORDER OF COLUMNS.
2) YOUR QUERY SHOULD DISPLAY COLUMNS IN THE SAME ORDER AS MENTIONED IN ALL QUESTIONS.
3) YOU CAN FIND THE ORDER OF COLUMNS IN QUESTION TEMPLATE SECTION OF EACH QUESTION.
4) USE ALIASING AS MENTIONED IN QUESTION TEMPLATE FOR ALL COLUMNS
5) DO NOT CHANGE COLUMN NAMES*/
                   
-- Question 1 (Marks: 3)
-- Objective: Determine, for flights that actually departed later than scheduled, what the average departure delay is (in minutes).
-- Calculate the Average Delay in Departures for Delayed Flights
-- Question Template: Display following columns flight_id, flight_no, departure_delay_minutes

SELECT 
    flight_id,
    flight_no,
    TIMESTAMPDIFF(MINUTE,
        scheduled_departure,
        actual_departure) AS departure_delay_minutes
FROM
    FLIGHTS
WHERE
    actual_departure > scheduled_departure;


-- Question 2 (Marks: 3)
-- Objective: Show how frequently each aircraft is used by counting the number of flights operated by each aircraft.
-- List Flights Grouped by Aircraft to See Usage Frequency
-- Question Template: Display following columns aircraft_code, total_flights, avg_flight_duration_minutes

SELECT 
    aircraft_code,
    COUNT(*) AS total_flights,
    AVG(TIMESTAMPDIFF(MINUTE,
        actual_departure,
        actual_arrival)) AS avg_flight_duration_minutes
FROM
    FLIGHTS
WHERE
    actual_departure IS NOT NULL
        AND actual_arrival IS NOT NULL
GROUP BY aircraft_code;

-- Question 3 (Marks: 3)
-- Objective: Aggregate the total revenue generated by each flight by summing up the fare amounts from the ticket_flights table.
-- Calculate Total Revenue per Flight from the Ticket_Flights Table
-- Question Template: Display following columns flight_id, flight_no, total_revenue

SELECT 
    tf.flight_id, f.flight_no, SUM(tf.amount) AS total_revenue
FROM
    TICKET_FLIGHTS tf
        JOIN
    FLIGHTS f ON tf.flight_id = f.flight_id
GROUP BY tf.flight_id , f.flight_no;

-- Question 4 (Marks: 3)
-- Objective: Examine boarding pass data to identify how passengers are being boarded by calculating the average boarding number per flight.
-- Analyze Boarding Numbers per Flight to Detect Patterns in Boarding Pass Allocation
-- Question Template: Display following columns flight_id, avg_boarding_no, total_boarding_passes

SELECT 
    flight_id,
    AVG(boarding_no) AS avg_boarding_no,
    COUNT(*) AS total_boarding_passes
FROM
    BOARDING_PASSES
GROUP BY flight_id;


-- Question 5 (Marks: 7)
-- Objective: Identify seat occupancy by comparing the number of boarding passes (occupied seats) to the total seats available on an aircraft, and consider the fare conditions for those seats.
-- Determine Occupancy and Fare Conditions per Aircraft
-- Question Template: Display following columns flight_id, flight_no, aircraft_code, occupied_seats, occupancy_rate_percentage

SELECT 
    f.flight_id,
    f.flight_no,
    f.aircraft_code,
    COUNT(bp.boarding_no) AS occupied_seats,
    ROUND(COUNT(bp.boarding_no) / NULLIF((SELECT 
                            COUNT(*)
                        FROM
                            SEATS s
                        WHERE
                            s.aircraft_code = f.aircraft_code),
                    0) * 100,
            2) AS occupancy_rate_percentage
FROM
    FLIGHTS f
        LEFT JOIN
    BOARDING_PASSES bp ON f.flight_id = bp.flight_id
GROUP BY f.flight_id , f.flight_no , f.aircraft_code;


-- Question 6 (Marks: 3)
-- Objective: Identify the three flights that generated the highest revenue based on ticket sales.
-- Top 3 Flights by Revenue
-- Question Template: Display following columns flight_id, flight_no, total_revenue

SELECT 
    tf.flight_id, f.flight_no, SUM(tf.amount) AS total_revenue
FROM
    TICKET_FLIGHTS tf
        JOIN
    FLIGHTS f ON tf.flight_id = f.flight_id
GROUP BY tf.flight_id , f.flight_no
ORDER BY total_revenue DESC
LIMIT 3;

-- Question 7 (Marks: 3)
-- Objective: Determine the average flight duration for each aircraft model, allowing you to see how flight performance might vary between different models.
-- Average Flight Duration by Aircraft Model
-- Question Template: Display following columns model, avg_duration_minutes

SELECT 
    a.model,
    AVG(TIMESTAMPDIFF(MINUTE, f.actual_departure, f.actual_arrival)) AS avg_duration_minutes
FROM FLIGHTS f
JOIN AIRCRAFTS a ON f.aircraft_code = a.aircraft_code
WHERE f.actual_departure IS NOT NULL AND f.actual_arrival IS NOT NULL
GROUP BY a.model;


-- Question 8 (Marks: 2)
-- Objective: Count how many flights depart from each airport to assess airport activity levels.
-- Flight Count per Airport (Departure)
-- Question Template: Display following columns departure_airport, departure_flights

SELECT 
    departure_airport, COUNT(*) AS departure_flights
FROM
    FLIGHTS
GROUP BY departure_airport;

-- Question 9 (Marks: 2)
-- Objective: Count how many flights depart from and arrive at each airport to assess airport activity levels.
-- Flight Count per Airport (Arrival)
-- Question Template: Display following columns arrival_airport, arrival_flights

SELECT 
    arrival_airport, COUNT(*) AS arrival_flights
FROM
    FLIGHTS
GROUP BY arrival_airport;

-- Question 10 (Marks: 3)
-- Objective: Analyze trends in bookings over time by grouping bookings by date, counting total bookings, and summing up the revenue.
-- Daily Booking Trends
-- Question Template: Display following columns booking_date, total_bookings, total_revenue

SELECT 
    DATE(book_date) AS booking_date,
    COUNT(*) AS total_bookings,
    SUM(total_amount) AS total_revenue
FROM BOOKINGS
GROUP BY DATE(book_date);

-- Question 11 (Marks: 3)
-- Objective: Identify the most common routes by counting the number of flights for each departureâ€“arrival airport pair.
-- Frequent Routes Analysis
-- Question Template: Display following columns departure_airport, arrival_airports, flights_count

SELECT 
    departure_airport,
    arrival_airport,
    COUNT(*) AS flights_count
FROM
    FLIGHTS
GROUP BY departure_airport , arrival_airport
ORDER BY flights_count DESC;

-- Question 12 (Marks: 3)
-- Objective: Determine how many passengers boarded each flight by counting the boarding passes issued.
-- Passenger Boarding Summary per Flight
-- Question Template: Display following columns flight_id, passengers_boarded

SELECT 
    flight_id, COUNT(*) AS passengers_boarded
FROM
    BOARDING_PASSES
GROUP BY flight_id;

-- Question 13 (Marks: 3)
-- Objective: Assess the boarding process by calculating the average boarding order number for each flight, which may indicate the boarding strategy or sequence.
-- Average Boarding Number per Flight
-- Question Template: Display following columns flight_id, avg_boarding_no

SELECT 
    flight_id, AVG(boarding_no) AS avg_boarding_no
FROM
    BOARDING_PASSES
GROUP BY flight_id;

-- Question 14 (Marks: 7)
-- Objective: Measure the seat occupancy rate for each flight by comparing the number of boarding passes issued with the total seats available on the aircraft.
-- Seat Occupancy Rate per Flight
-- Question Template: Display following columns flight_id, flight_no, occupied_seats, occupany_rate_percentage

SELECT 
    f.flight_id,
    f.flight_no,
    COUNT(bp.boarding_no) AS occupied_seats,
    ROUND(COUNT(bp.boarding_no) / NULLIF((SELECT 
                            COUNT(*)
                        FROM
                            SEATS s
                        WHERE
                            s.aircraft_code = f.aircraft_code),
                    0) * 100,
            2) AS occupany_rate_percentage
FROM
    FLIGHTS f
        LEFT JOIN
    BOARDING_PASSES bp ON f.flight_id = bp.flight_id
GROUP BY f.flight_id , f.flight_no;

-- Question 15 (Marks: 3)
-- Objective: Aggregate the total amount spent by each passenger across all their tickets by joining the tickets and ticket_flights tables.
-- Total Spend per Passenger
-- Question Template: Display following columns passenger_id, total_tickets, total_spent

SELECT 
    t.passenger_id,
    COUNT(tf.ticket_no) AS total_tickets,
    SUM(tf.amount) AS total_spent
FROM
    TICKETS t
        JOIN
    TICKET_FLIGHTS tf ON t.ticket_no = tf.ticket_no
GROUP BY t.passenger_id;

